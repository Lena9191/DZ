<?php
/*
Работа с %

1. Даны переменные $a = 10 и $b = 3. Найдите остаток от деления $a на $b.

*/
$a = 10;
$b = 3;
$ost = $a % $b;
echo $ost;
echo '<br>' . '<br>' . '<br>';

/*
2. Даны переменные $a и $b. Проверьте, что $a делится без остатка на $b. Если это так — выведите 'Делится' и результат деления, иначе выведите 'Делится с остатком' и остаток от деления.
*/

echo ($a % $b == 0) ? 'Делится!' : 'Делится с остатком';
echo '<br>' . '<br>' . '<br>';
/*
Работа с модулем

3. Даны переменные $a и $b. Найдите найдите модуль разности $a и $b. Проверьте работу скрипта самостоятельно для различных $a и $b.
*/
$a = 5;
$b = 6;
echo abs($a - $b);
echo '<br>' . '<br>' . '<br>';

/*
4. Даны переменные $a и $b. Отнимите от $a переменную $b и результат присвойте переменной $c. Сделайте так, чтобы в любом случае в переменную $c записалось положительное значение. Проверьте работу скрипта при $a и $b, равных соответственно 3 и 5, 6 и 1.
*/
$a = 1;
$b = 5;
$c = abs($a - $b);
echo $c;
echo '<br>' . '<br>' . '<br>';

/*
Работа со степенью и корнем

5. Возведите 2 в 10 степень. Результат запишите в переменную $st.
*/
$a = 2;
$b = 10;
$st = $a ** $b;
echo $st;
echo '<br>' . '<br>' . '<br>';

/*
6. Найдите квадратный корень из 245.
*/
$a = 245;
echo sqrt($a);
echo '<br>' . '<br>' . '<br>';

/*
7. Дан массив с элементами 4, 2, 5, 19, 13, 0, 10. Найдите квадратный корень из суммы квадратов его элементов. Для решения воспользуйтесь циклом foreach.
*/
$sum = 0;
$arr = [4, 2, 5, 19, 13, 0, 10];
foreach ($arr as $value) {
    $sqrt = $value * $value;
    $sum += $sqrt;
}
echo $sum . "-сумма квадратов" . '<br>' . sqrt($sum) . "-квадратный корень";
echo '<br>' . '<br>' . '<br>';
/*
Работа с функциями округления

8. Найдите квадратный корень из 379. Результат округлите до целых, до десятых, до сотых.
*/
$a = sqrt(379);
echo round($a) . '<br>';
echo round($a, 1) . '<br>';
echo round($a, 2);
echo '<br>' . '<br>' . '<br>';

/*
9. Найдите квадратный корень из 587. Округлите результат в большую и меньшую сторону,
запишите результаты округления в ассоциативный массив с ключами 'floor' и 'ceil'.
*/
$x = sqrt(587);
$y = ceil($x);
$z = floor($x);
$arr = array('ceil' => $y, 'floor' => $z);
print_r($arr);
echo '<br>' . '<br>' . '<br>';

/*
Работа с min и max

10. Даны числа 4, -2, 5, 19, -130, 0, 10. Найдите минимальное и максимальное число.
*/
$arr = [4, -2, 5, 19, -130, 0, 10];
$min = min($arr);
$max = max($arr);
echo "Это минимальное значение" . $min . '<br>' . "Это максимальное значение" . $max;
echo '<br>' . '<br>' . '<br>';

/*
Работа с рандомом
11. Выведите на экран случайное число от 1 до 100.
*/
$rand = rand(1, 100);
echo $rand;
echo '<br>' . '<br>' . '<br>';

/*
12. Сделайте так, чтобы каждый раз при обновлении страницы на экран выводилась случайным образом одна из трех картинок.
*/
$rand = rand(1, 3);
echo '<img src="' . $rand . '.jpg">';
echo '<br>' . '<br>' . '<br>';

/*r
13. Заполните массив 10-ю случайными числами. (Подсказка: нужно воспользоваться циклами for или while).
*/
$arr = [];
for ($i = 0; $i < 10; $i++) {
    $arr[] = rand(1, 100);
}
print_r($arr);
echo '<br>' . '<br>' . '<br>';

/*
Общие задачи

14. Напишите скрипт, который будет находить корни квадратного уравнения.????????
*/
$a = 36;
echo sqrt($a);
echo '<br>' . '<br>' . '<br>';

/*
15. Напишите скрипт, который   будет находить факториал числа. Факториал — это произведение всех целых чисел, меньше данного. Например, 4! = 1*2*3*4 = 24.
*/
function factorial($n)
{
    $result = 1;
    for ($i = 2; $i <= $n; $i++) {
        $result = $result * $i;
    }
    
    return $result;
}

echo factorial(4);
echo '<br>' . '<br>' . '<br>';


echo gmp_fact(4);
echo '<br>' . '<br>' . '<br>';

/*
16. Напишите скрипт, который проверяет, является ли данное число простым (простое число — это то, которое делится только на 1 и на само себя).
*/
echo gmp_prob_prime(0, 07);
echo '<br>' . '<br>' . '<br>';

/*
17. Дан массив $arr. Найдите среднее арифметическое его элементов. Подсказка: количество элементов массива можно подсчитать функцией count. Проверьте задачу на массиве с элементами 12, 15, 20, 25, 59, 79.
*/
$arr = [12, 15, 20, 25, 59, 79];
$count = count($arr);
echo array_sum($arr) / $count;
echo '<br>' . '<br>' . '<br>';

/*
18. Напишите скрипт-калькулятор единого налога. Налог считается так: если вы заработали менее, чем ставка $stavka этого налога, умноженная на 30 — то платите ставку. Если же вы заработали более, чем 30*$stavka, то платите не только ставку налога, но и 5% от той суммы, на которую вы превысили 30*$stavka.
*/
$sum = 301;
$stavka = 10;
if ($sum <= $stavka * 30) {
    echo 'Нужно заплатить' . '-' . $stavka;
}
if ($sum > $stavka * 30) {
    echo "Нужно заплатить -", $stavka + ($sum - $stavka * 30) / 20;
}
echo '<br>' . '<br>' . '<br>';

/*
19. Напишите скрипт-калькулятор оплаты за электроэнергию. Сумма считается так: если вы потратили за месяц менее 150 киловатт, то сумма считается по одной ставке $summ1 за 1 киловатт, всё, что больше 150 и меньше 300 киловатт считается по ставке $summ2, а все киловатты после 300 — по ставке $summ3.
*/
$sum1 = 0.7;
$sum2 = 1.3;
$sum3 = 1.7;
$elektro = 152;

if ($elektro < 150) {
    echo round($elektro * $sum1);
} elseif ($elektro >= 150 || $elektro < 300) {
    echo round($elektro * $sum2);
} else {
    echo round($elektro * $sum3);
}
echo '<br>' . '<br>' . '<br>';


/*
20. Напишите скрипт, который найдет все простые числа в заданном промежутке. Проверьте его работу на промежутке от 1 до 1000.
*/

for ($i = 1; $i <= 100; $i++) {
    $count = 0;
    for ($j = 1; $j <= 100; $j++) {
        if ($i % $j == 0) {
            $count++;
        }
    }
    if ($count == 2) {
        echo $i . '-';
    }
}
echo '<br>' . '<br>' . '<br>';

/*
21. Напишите скрипт, который будет находить тройки целых чисел, удовлетворяющих теореме Пифагора.
3 цикла
*/

for($i=1;$i<=10;$i++)
{
    for($j=1;$i<=10;$i++)
    {
        $a=$i**2-$j**2;
        $b=2*$i*$j;
        $c=$i**2+$j**2;
        echo $a. '-'.$b. '-'.$c. '<br>';
        
    }
    
}
